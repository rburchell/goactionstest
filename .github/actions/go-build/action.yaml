name: "Build Golang Binary"
description: "Build Golang binary for a specific OS and architecture."

inputs:
  go-version:
    description: "Go version to use"
    required: true
  os:
    description: "Target OS"
    required: true
  arch:
    description: "Target architecture"
    required: true
  env:
    description: "Additional env vars (e.g., CGO_ENABLED=0)"
    required: false
  path:
    description: "Path to the command directory to build"
    required: true
  output-name:
    description: "Name for the output binary (optional)"
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ inputs.go-version }}

    - id: build
      name: Build binary
      shell: bash
      run: |
        set -euo pipefail

        echo "Doing exports..."
        while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            echo "Exporting: $line"
            export "$line"
        fi
        done <<< "${{ inputs.env }}"

        echo "Doing env setup..."
        export GOOS="${{ inputs.os }}"
        export GOARCH="${{ inputs.arch }}"

        BIN_NAME="${{ inputs.output-name }}"
        [[ -z "$BIN_NAME" ]] && BIN_NAME="$(basename ${{ inputs.path }})"

        EXT=""
        [[ "$GOOS" == "windows" ]] && EXT=".exe"

        VERSION="$(git describe --tags --always)"

        echo "Doing build..."
        go build \
          -ldflags="-s -w" \
          -trimpath \
          -o "$BIN_NAME$EXT" \
          "./${{ inputs.path }}"

        echo "Doing archive..."
        case "$GOOS" in
          windows | darwin)
            ARCHIVE="$BIN_NAME-${VERSION}-${GOOS}-${GOARCH}.zip"
            zip -9q "$ARCHIVE" "./${{ inputs.path }}/$BIN_NAME$EXT" LICENSE
            ;;
          linux)
            tar -I 'gzip -9' -cf "$ARCHIVE" "./${{ inputs.path }}/$BIN_NAME$EXT" LICENSE
            ;;
          *)
            echo "Unsupported OS: $GOOS"
            exit 1
            ;;
        esac

        rm "./${{ inputs.path }}/$BIN_NAME$EXT"

        echo "Doing final steps..."
        echo "sha256:"
        shasum -a 256 "$ARCHIVE"

        echo "Archive created:"
        ls -l "$ARCHIVE"
        echo "archive=$ARCHIVE" >> $GITHUB_OUTPUT

    - name: Debug before upload
      shell: bash
      run: |
        echo "Uploading file: ${{ steps.build.outputs.archive }}"
        ls -l "${{ steps.build.outputs.archive }}"
        echo "GITHUB_TOKEN present: ${GITHUB_TOKEN:+yes}"

    - name: Make release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
          files: ${{ steps.build.outputs.archive }}
